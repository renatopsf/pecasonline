!function(){"use strict";function t(){var t=[].slice.call(arguments);alert(JSON.stringify(t))}QUnit.config.reorder=!1,QUnit.config.autorun=!1,QUnit.log(function(n){if("[object Object], undefined:undefined"!==n.message){var e,i;n.result||(e=QUnit.jsDump.parse(n.actual),i=QUnit.jsDump.parse(n.expected)),t("qunit.log",n.result,e,i,n.message,n.source)}}),QUnit.testStart(function(n){t("qunit.testStart",n.name)}),QUnit.testDone(function(n){t("qunit.testDone",n.name,n.failed,n.passed,n.total,n.duration)}),QUnit.moduleStart(function(n){t("qunit.moduleStart",n.name)}),QUnit.moduleDone(function(n){0===n.failed?console.log('\r✔ All tests passed in "'+n.name+'" module'):console.log("✖ "+n.failed+' tests failed in "'+n.name+'" module'),t("qunit.moduleDone",n.name,n.failed,n.passed,n.total)}),QUnit.begin(function(){t("qunit.begin"),console.log("\n\nStarting test suite"),console.log("================================================\n")}),QUnit.done(function(n){t("qunit.done",n.failed,n.passed,n.total,n.runtime)})}();